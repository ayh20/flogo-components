// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: udalStreaming.proto

package f1telemetry2019proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamType int32

const (
	StreamType_STREAM_TYPE_NOT_SET  StreamType = 0
	StreamType_STREAM_TYPE_LIVE     StreamType = 1
	StreamType_STREAM_TYPE_HISTORIC StreamType = 2
)

// Enum value maps for StreamType.
var (
	StreamType_name = map[int32]string{
		0: "STREAM_TYPE_NOT_SET",
		1: "STREAM_TYPE_LIVE",
		2: "STREAM_TYPE_HISTORIC",
	}
	StreamType_value = map[string]int32{
		"STREAM_TYPE_NOT_SET":  0,
		"STREAM_TYPE_LIVE":     1,
		"STREAM_TYPE_HISTORIC": 2,
	}
)

func (x StreamType) Enum() *StreamType {
	p := new(StreamType)
	*p = x
	return p
}

func (x StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_udalStreaming_proto_enumTypes[0].Descriptor()
}

func (StreamType) Type() protoreflect.EnumType {
	return &file_udalStreaming_proto_enumTypes[0]
}

func (x StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamType.Descriptor instead.
func (StreamType) EnumDescriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{0}
}

type DataFeedType int32

const (
	DataFeedType_DATA_FEED_TYPE_INVALID              DataFeedType = 0
	DataFeedType_DATA_FEED_TYPE_TELEMETRY            DataFeedType = 1
	DataFeedType_DATA_FEED_TYPE_TELEMETRY_AGGREGATED DataFeedType = 2
	DataFeedType_DATA_FEED_TYPE_AUGMENTATION         DataFeedType = 3
	DataFeedType_DATA_FEED_TYPE_METRIC               DataFeedType = 4
	DataFeedType_DATA_FEED_TYPE_EVENT                DataFeedType = 5
	DataFeedType_DATA_FEED_TYPE_EVENT_AGGREGATED     DataFeedType = 6
)

// Enum value maps for DataFeedType.
var (
	DataFeedType_name = map[int32]string{
		0: "DATA_FEED_TYPE_INVALID",
		1: "DATA_FEED_TYPE_TELEMETRY",
		2: "DATA_FEED_TYPE_TELEMETRY_AGGREGATED",
		3: "DATA_FEED_TYPE_AUGMENTATION",
		4: "DATA_FEED_TYPE_METRIC",
		5: "DATA_FEED_TYPE_EVENT",
		6: "DATA_FEED_TYPE_EVENT_AGGREGATED",
	}
	DataFeedType_value = map[string]int32{
		"DATA_FEED_TYPE_INVALID":              0,
		"DATA_FEED_TYPE_TELEMETRY":            1,
		"DATA_FEED_TYPE_TELEMETRY_AGGREGATED": 2,
		"DATA_FEED_TYPE_AUGMENTATION":         3,
		"DATA_FEED_TYPE_METRIC":               4,
		"DATA_FEED_TYPE_EVENT":                5,
		"DATA_FEED_TYPE_EVENT_AGGREGATED":     6,
	}
)

func (x DataFeedType) Enum() *DataFeedType {
	p := new(DataFeedType)
	*p = x
	return p
}

func (x DataFeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_udalStreaming_proto_enumTypes[1].Descriptor()
}

func (DataFeedType) Type() protoreflect.EnumType {
	return &file_udalStreaming_proto_enumTypes[1]
}

func (x DataFeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFeedType.Descriptor instead.
func (DataFeedType) EnumDescriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{1}
}

type TriggerSource int32

const (
	TriggerSource_TRIGGER_SOURCE_INVALID         TriggerSource = 0
	TriggerSource_TRIGGER_SOURCE_MAINSTRAIGHT    TriggerSource = 1
	TriggerSource_TRIGGER_SOURCE_PITLANE         TriggerSource = 2
	TriggerSource_TRIGGER_SOURCE_DEFAULT         TriggerSource = 3
	TriggerSource_TRIGGER_SOURCE_TELEMETRY_START TriggerSource = 4
	TriggerSource_TRIGGER_SOURCE_TELEMETRY_END   TriggerSource = 5
)

// Enum value maps for TriggerSource.
var (
	TriggerSource_name = map[int32]string{
		0: "TRIGGER_SOURCE_INVALID",
		1: "TRIGGER_SOURCE_MAINSTRAIGHT",
		2: "TRIGGER_SOURCE_PITLANE",
		3: "TRIGGER_SOURCE_DEFAULT",
		4: "TRIGGER_SOURCE_TELEMETRY_START",
		5: "TRIGGER_SOURCE_TELEMETRY_END",
	}
	TriggerSource_value = map[string]int32{
		"TRIGGER_SOURCE_INVALID":         0,
		"TRIGGER_SOURCE_MAINSTRAIGHT":    1,
		"TRIGGER_SOURCE_PITLANE":         2,
		"TRIGGER_SOURCE_DEFAULT":         3,
		"TRIGGER_SOURCE_TELEMETRY_START": 4,
		"TRIGGER_SOURCE_TELEMETRY_END":   5,
	}
)

func (x TriggerSource) Enum() *TriggerSource {
	p := new(TriggerSource)
	*p = x
	return p
}

func (x TriggerSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerSource) Descriptor() protoreflect.EnumDescriptor {
	return file_udalStreaming_proto_enumTypes[2].Descriptor()
}

func (TriggerSource) Type() protoreflect.EnumType {
	return &file_udalStreaming_proto_enumTypes[2]
}

func (x TriggerSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerSource.Descriptor instead.
func (TriggerSource) EnumDescriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{2}
}

type LapData_LapType int32

const (
	LapData_LAP_TYPE_INVALID  LapData_LapType = 0
	LapData_LAP_TYPE_LAP      LapData_LapType = 1
	LapData_LAP_TYPE_INLAP    LapData_LapType = 2
	LapData_LAP_TYPE_OUTLAP   LapData_LapType = 3
	LapData_LAP_TYPE_PITLANE  LapData_LapType = 4
	LapData_LAP_TYPE_FAST_LAP LapData_LapType = 5
)

// Enum value maps for LapData_LapType.
var (
	LapData_LapType_name = map[int32]string{
		0: "LAP_TYPE_INVALID",
		1: "LAP_TYPE_LAP",
		2: "LAP_TYPE_INLAP",
		3: "LAP_TYPE_OUTLAP",
		4: "LAP_TYPE_PITLANE",
		5: "LAP_TYPE_FAST_LAP",
	}
	LapData_LapType_value = map[string]int32{
		"LAP_TYPE_INVALID":  0,
		"LAP_TYPE_LAP":      1,
		"LAP_TYPE_INLAP":    2,
		"LAP_TYPE_OUTLAP":   3,
		"LAP_TYPE_PITLANE":  4,
		"LAP_TYPE_FAST_LAP": 5,
	}
)

func (x LapData_LapType) Enum() *LapData_LapType {
	p := new(LapData_LapType)
	*p = x
	return p
}

func (x LapData_LapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LapData_LapType) Descriptor() protoreflect.EnumDescriptor {
	return file_udalStreaming_proto_enumTypes[3].Descriptor()
}

func (LapData_LapType) Type() protoreflect.EnumType {
	return &file_udalStreaming_proto_enumTypes[3]
}

func (x LapData_LapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LapData_LapType.Descriptor instead.
func (LapData_LapType) EnumDescriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{9, 0}
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampNano int64   `protobuf:"varint,1,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	Value         float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{0}
}

func (x *Sample) GetTimestampNano() int64 {
	if x != nil {
		return x.TimestampNano
	}
	return 0
}

func (x *Sample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AggregatedSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampNano int64   `protobuf:"varint,1,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	Value         float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	FirstValue    float64 `protobuf:"fixed64,3,opt,name=firstValue,proto3" json:"firstValue,omitempty"`
	LastValue     float64 `protobuf:"fixed64,4,opt,name=lastValue,proto3" json:"lastValue,omitempty"`
	AvgValue      float64 `protobuf:"fixed64,5,opt,name=avgValue,proto3" json:"avgValue,omitempty"`
	MinValue      float64 `protobuf:"fixed64,6,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue      float64 `protobuf:"fixed64,7,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
}

func (x *AggregatedSample) Reset() {
	*x = AggregatedSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedSample) ProtoMessage() {}

func (x *AggregatedSample) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedSample.ProtoReflect.Descriptor instead.
func (*AggregatedSample) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{1}
}

func (x *AggregatedSample) GetTimestampNano() int64 {
	if x != nil {
		return x.TimestampNano
	}
	return 0
}

func (x *AggregatedSample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AggregatedSample) GetFirstValue() float64 {
	if x != nil {
		return x.FirstValue
	}
	return 0
}

func (x *AggregatedSample) GetLastValue() float64 {
	if x != nil {
		return x.LastValue
	}
	return 0
}

func (x *AggregatedSample) GetAvgValue() float64 {
	if x != nil {
		return x.AvgValue
	}
	return 0
}

func (x *AggregatedSample) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *AggregatedSample) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

type AggregatedDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterId int32               `protobuf:"varint,1,opt,name=parameterId,proto3" json:"parameterId,omitempty"`
	Status      int32               `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Samples     []*AggregatedSample `protobuf:"bytes,3,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *AggregatedDataPoint) Reset() {
	*x = AggregatedDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedDataPoint) ProtoMessage() {}

func (x *AggregatedDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedDataPoint.ProtoReflect.Descriptor instead.
func (*AggregatedDataPoint) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{2}
}

func (x *AggregatedDataPoint) GetParameterId() int32 {
	if x != nil {
		return x.ParameterId
	}
	return 0
}

func (x *AggregatedDataPoint) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AggregatedDataPoint) GetSamples() []*AggregatedSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterId int32     `protobuf:"varint,1,opt,name=parameterId,proto3" json:"parameterId,omitempty"`
	Status      int32     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Samples     []*Sample `protobuf:"bytes,3,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{3}
}

func (x *DataPoint) GetParameterId() int32 {
	if x != nil {
		return x.ParameterId
	}
	return 0
}

func (x *DataPoint) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DataPoint) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type TelemetrySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier  string       `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FeedGUID    string       `protobuf:"bytes,3,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName    string       `protobuf:"bytes,4,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId    string       `protobuf:"bytes,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType  StreamType   `protobuf:"varint,6,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID string       `protobuf:"bytes,7,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source      string       `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Quality     int32        `protobuf:"varint,9,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream bool         `protobuf:"varint,10,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	FeedType    DataFeedType `protobuf:"varint,11,opt,name=feedType,proto3,enum=protobuf.udal.udalstreaming.DataFeedType" json:"feedType,omitempty"`
	Format      string       `protobuf:"bytes,12,opt,name=format,proto3" json:"format,omitempty"`
	EpochNano   int64        `protobuf:"varint,13,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	DataPoints  []*DataPoint `protobuf:"bytes,14,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
}

func (x *TelemetrySample) Reset() {
	*x = TelemetrySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetrySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetrySample) ProtoMessage() {}

func (x *TelemetrySample) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetrySample.ProtoReflect.Descriptor instead.
func (*TelemetrySample) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{4}
}

func (x *TelemetrySample) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *TelemetrySample) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetrySample) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *TelemetrySample) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *TelemetrySample) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TelemetrySample) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *TelemetrySample) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *TelemetrySample) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TelemetrySample) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *TelemetrySample) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *TelemetrySample) GetFeedType() DataFeedType {
	if x != nil {
		return x.FeedType
	}
	return DataFeedType_DATA_FEED_TYPE_INVALID
}

func (x *TelemetrySample) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TelemetrySample) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *TelemetrySample) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

type TelemetryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier  string       `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FeedGUID    string       `protobuf:"bytes,3,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName    string       `protobuf:"bytes,4,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId    string       `protobuf:"bytes,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType  StreamType   `protobuf:"varint,6,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID string       `protobuf:"bytes,7,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source      string       `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Quality     int32        `protobuf:"varint,9,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream bool         `protobuf:"varint,10,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	FeedType    DataFeedType `protobuf:"varint,11,opt,name=feedType,proto3,enum=protobuf.udal.udalstreaming.DataFeedType" json:"feedType,omitempty"`
	Format      string       `protobuf:"bytes,12,opt,name=format,proto3" json:"format,omitempty"`
	EpochNano   int64        `protobuf:"varint,13,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	Frequency   float64      `protobuf:"fixed64,14,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DataPoints  []*DataPoint `protobuf:"bytes,15,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{5}
}

func (x *TelemetryData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *TelemetryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryData) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *TelemetryData) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *TelemetryData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TelemetryData) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *TelemetryData) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *TelemetryData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TelemetryData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *TelemetryData) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *TelemetryData) GetFeedType() DataFeedType {
	if x != nil {
		return x.FeedType
	}
	return DataFeedType_DATA_FEED_TYPE_INVALID
}

func (x *TelemetryData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TelemetryData) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *TelemetryData) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *TelemetryData) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

type SessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier    string       `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name          string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FeedGUID      string       `protobuf:"bytes,3,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName      string       `protobuf:"bytes,4,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId      string       `protobuf:"bytes,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType    StreamType   `protobuf:"varint,6,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID   string       `protobuf:"bytes,7,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source        string       `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Quality       int32        `protobuf:"varint,9,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream   bool         `protobuf:"varint,10,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	EpochNano     int64        `protobuf:"varint,11,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	TimestampNano int64        `protobuf:"varint,12,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	Type          string       `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	Sessions      []string     `protobuf:"bytes,14,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Details       []*NameValue `protobuf:"bytes,15,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *SessionData) Reset() {
	*x = SessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionData) ProtoMessage() {}

func (x *SessionData) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionData.ProtoReflect.Descriptor instead.
func (*SessionData) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{6}
}

func (x *SessionData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SessionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionData) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *SessionData) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *SessionData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SessionData) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *SessionData) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *SessionData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SessionData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *SessionData) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *SessionData) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *SessionData) GetTimestampNano() int64 {
	if x != nil {
		return x.TimestampNano
	}
	return 0
}

func (x *SessionData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SessionData) GetSessions() []string {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *SessionData) GetDetails() []*NameValue {
	if x != nil {
		return x.Details
	}
	return nil
}

type EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier    string     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name          string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FeedGUID      string     `protobuf:"bytes,3,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName      string     `protobuf:"bytes,4,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId      string     `protobuf:"bytes,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType    StreamType `protobuf:"varint,6,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID   string     `protobuf:"bytes,7,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source        string     `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Quality       int32      `protobuf:"varint,9,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream   bool       `protobuf:"varint,10,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	EpochNano     int64      `protobuf:"varint,11,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	TimestampNano int64      `protobuf:"varint,12,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	Events        []float64  `protobuf:"fixed64,13,rep,packed,name=events,proto3" json:"events,omitempty"`
}

func (x *EventData) Reset() {
	*x = EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{7}
}

func (x *EventData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *EventData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventData) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *EventData) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *EventData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *EventData) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *EventData) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *EventData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *EventData) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *EventData) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *EventData) GetTimestampNano() int64 {
	if x != nil {
		return x.TimestampNano
	}
	return 0
}

func (x *EventData) GetEvents() []float64 {
	if x != nil {
		return x.Events
	}
	return nil
}

type TriggerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier    string        `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	FeedGUID      string        `protobuf:"bytes,2,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName      string        `protobuf:"bytes,3,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId      string        `protobuf:"bytes,4,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType    StreamType    `protobuf:"varint,5,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID   string        `protobuf:"bytes,6,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source        string        `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Quality       int32         `protobuf:"varint,8,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream   bool          `protobuf:"varint,9,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	EpochNano     int64         `protobuf:"varint,10,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	TimestampNano int64         `protobuf:"varint,11,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	TriggerSource TriggerSource `protobuf:"varint,12,opt,name=triggerSource,proto3,enum=protobuf.udal.udalstreaming.TriggerSource" json:"triggerSource,omitempty"`
	Triggers      []string      `protobuf:"bytes,13,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *TriggerData) Reset() {
	*x = TriggerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerData) ProtoMessage() {}

func (x *TriggerData) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerData.ProtoReflect.Descriptor instead.
func (*TriggerData) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{8}
}

func (x *TriggerData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *TriggerData) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *TriggerData) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *TriggerData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TriggerData) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *TriggerData) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *TriggerData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TriggerData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *TriggerData) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *TriggerData) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *TriggerData) GetTimestampNano() int64 {
	if x != nil {
		return x.TimestampNano
	}
	return 0
}

func (x *TriggerData) GetTriggerSource() TriggerSource {
	if x != nil {
		return x.TriggerSource
	}
	return TriggerSource_TRIGGER_SOURCE_INVALID
}

func (x *TriggerData) GetTriggers() []string {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type LapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier         string          `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	FeedGUID           string          `protobuf:"bytes,2,opt,name=feedGUID,proto3" json:"feedGUID,omitempty"`
	FeedName           string          `protobuf:"bytes,3,opt,name=feedName,proto3" json:"feedName,omitempty"`
	StreamId           string          `protobuf:"bytes,4,opt,name=streamId,proto3" json:"streamId,omitempty"`
	StreamType         StreamType      `protobuf:"varint,5,opt,name=streamType,proto3,enum=protobuf.udal.udalstreaming.StreamType" json:"streamType,omitempty"`
	SessionGUID        string          `protobuf:"bytes,6,opt,name=sessionGUID,proto3" json:"sessionGUID,omitempty"`
	Source             string          `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Quality            int32           `protobuf:"varint,8,opt,name=quality,proto3" json:"quality,omitempty"`
	EndOfStream        bool            `protobuf:"varint,10,opt,name=endOfStream,proto3" json:"endOfStream,omitempty"`
	LapNumber          int32           `protobuf:"varint,11,opt,name=lapNumber,proto3" json:"lapNumber,omitempty"`
	Type               LapData_LapType `protobuf:"varint,12,opt,name=type,proto3,enum=protobuf.udal.udalstreaming.LapData_LapType" json:"type,omitempty"`
	TriggerSource      TriggerSource   `protobuf:"varint,13,opt,name=triggerSource,proto3,enum=protobuf.udal.udalstreaming.TriggerSource" json:"triggerSource,omitempty"`
	EpochNano          int64           `protobuf:"varint,14,opt,name=epochNano,proto3" json:"epochNano,omitempty"`
	StartTimestampNano int64           `protobuf:"varint,15,opt,name=startTimestampNano,proto3" json:"startTimestampNano,omitempty"`
	EndTimestampNano   int64           `protobuf:"varint,16,opt,name=endTimestampNano,proto3" json:"endTimestampNano,omitempty"`
}

func (x *LapData) Reset() {
	*x = LapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LapData) ProtoMessage() {}

func (x *LapData) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LapData.ProtoReflect.Descriptor instead.
func (*LapData) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{9}
}

func (x *LapData) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *LapData) GetFeedGUID() string {
	if x != nil {
		return x.FeedGUID
	}
	return ""
}

func (x *LapData) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *LapData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *LapData) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_STREAM_TYPE_NOT_SET
}

func (x *LapData) GetSessionGUID() string {
	if x != nil {
		return x.SessionGUID
	}
	return ""
}

func (x *LapData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LapData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *LapData) GetEndOfStream() bool {
	if x != nil {
		return x.EndOfStream
	}
	return false
}

func (x *LapData) GetLapNumber() int32 {
	if x != nil {
		return x.LapNumber
	}
	return 0
}

func (x *LapData) GetType() LapData_LapType {
	if x != nil {
		return x.Type
	}
	return LapData_LAP_TYPE_INVALID
}

func (x *LapData) GetTriggerSource() TriggerSource {
	if x != nil {
		return x.TriggerSource
	}
	return TriggerSource_TRIGGER_SOURCE_INVALID
}

func (x *LapData) GetEpochNano() int64 {
	if x != nil {
		return x.EpochNano
	}
	return 0
}

func (x *LapData) GetStartTimestampNano() int64 {
	if x != nil {
		return x.StartTimestampNano
	}
	return 0
}

func (x *LapData) GetEndTimestampNano() int64 {
	if x != nil {
		return x.EndTimestampNano
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID        int64                  `protobuf:"varint,1,opt,name=tagID,proto3" json:"tagID,omitempty"`
	DefinitionID int32                  `protobuf:"varint,2,opt,name=definitionID,proto3" json:"definitionID,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	DataPoints   []*TagDataPoint        `protobuf:"bytes,5,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
	Sessions     []int64                `protobuf:"varint,6,rep,packed,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_udalStreaming_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_udalStreaming_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_udalStreaming_proto_rawDescGZIP(), []int{10}
}

func (x *Tag) GetTagID() int64 {
	if x != nil {
		return x.TagID
	}
	return 0
}

func (x *Tag) GetDefinitionID() int32 {
	if x != nil {
		return x.DefinitionID
	}
	return 0
}

func (x *Tag) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Tag) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Tag) GetDataPoints() []*TagDataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

func (x *Tag) GetSessions() []int64 {
	if x != nil {
		return x.Sessions
	}
	return nil
}

var File_udalStreaming_proto protoreflect.FileDescriptor

var file_udalStreaming_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x64, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x1a, 0x12, 0x74, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e,
	0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0,
	0x01, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x76, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x22, 0x9d, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75,
	0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x45,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c,
	0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x65, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x46, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e,
	0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0xb9, 0x04, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65,
	0x64, 0x47, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65,
	0x64, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61,
	0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75,
	0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0xfe, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e,
	0x61, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xae, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61,
	0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e,
	0x61, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xf2, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61,
	0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e,
	0x61, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e,
	0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0xf2, 0x05, 0x0a, 0x07, 0x4c, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x55, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x70, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61,
	0x6c, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x75, 0x64, 0x61, 0x6c, 0x2e, 0x75, 0x64, 0x61,
	0x6c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6e,
	0x6f, 0x22, 0x87, 0x01, 0x0a, 0x07, 0x4c, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x4c, 0x41, 0x50, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x4c, 0x41, 0x50, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x54, 0x4c, 0x41,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x41, 0x50, 0x10, 0x05, 0x22, 0x8b, 0x02, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x67,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x55, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x10, 0x02,
	0x2a, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a,
	0xca, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x50, 0x49, 0x54, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_udalStreaming_proto_rawDescOnce sync.Once
	file_udalStreaming_proto_rawDescData = file_udalStreaming_proto_rawDesc
)

func file_udalStreaming_proto_rawDescGZIP() []byte {
	file_udalStreaming_proto_rawDescOnce.Do(func() {
		file_udalStreaming_proto_rawDescData = protoimpl.X.CompressGZIP(file_udalStreaming_proto_rawDescData)
	})
	return file_udalStreaming_proto_rawDescData
}

var file_udalStreaming_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_udalStreaming_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_udalStreaming_proto_goTypes = []interface{}{
	(StreamType)(0),               // 0: protobuf.udal.udalstreaming.StreamType
	(DataFeedType)(0),             // 1: protobuf.udal.udalstreaming.DataFeedType
	(TriggerSource)(0),            // 2: protobuf.udal.udalstreaming.TriggerSource
	(LapData_LapType)(0),          // 3: protobuf.udal.udalstreaming.LapData.LapType
	(*Sample)(nil),                // 4: protobuf.udal.udalstreaming.Sample
	(*AggregatedSample)(nil),      // 5: protobuf.udal.udalstreaming.AggregatedSample
	(*AggregatedDataPoint)(nil),   // 6: protobuf.udal.udalstreaming.AggregatedDataPoint
	(*DataPoint)(nil),             // 7: protobuf.udal.udalstreaming.DataPoint
	(*TelemetrySample)(nil),       // 8: protobuf.udal.udalstreaming.TelemetrySample
	(*TelemetryData)(nil),         // 9: protobuf.udal.udalstreaming.TelemetryData
	(*SessionData)(nil),           // 10: protobuf.udal.udalstreaming.SessionData
	(*EventData)(nil),             // 11: protobuf.udal.udalstreaming.EventData
	(*TriggerData)(nil),           // 12: protobuf.udal.udalstreaming.TriggerData
	(*LapData)(nil),               // 13: protobuf.udal.udalstreaming.LapData
	(*Tag)(nil),                   // 14: protobuf.udal.udalstreaming.Tag
	(*NameValue)(nil),             // 15: protobuf.common.NameValue
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*TagDataPoint)(nil),          // 17: protobuf.tagdata.TagDataPoint
}
var file_udalStreaming_proto_depIdxs = []int32{
	5,  // 0: protobuf.udal.udalstreaming.AggregatedDataPoint.samples:type_name -> protobuf.udal.udalstreaming.AggregatedSample
	4,  // 1: protobuf.udal.udalstreaming.DataPoint.samples:type_name -> protobuf.udal.udalstreaming.Sample
	0,  // 2: protobuf.udal.udalstreaming.TelemetrySample.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	1,  // 3: protobuf.udal.udalstreaming.TelemetrySample.feedType:type_name -> protobuf.udal.udalstreaming.DataFeedType
	7,  // 4: protobuf.udal.udalstreaming.TelemetrySample.dataPoints:type_name -> protobuf.udal.udalstreaming.DataPoint
	0,  // 5: protobuf.udal.udalstreaming.TelemetryData.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	1,  // 6: protobuf.udal.udalstreaming.TelemetryData.feedType:type_name -> protobuf.udal.udalstreaming.DataFeedType
	7,  // 7: protobuf.udal.udalstreaming.TelemetryData.dataPoints:type_name -> protobuf.udal.udalstreaming.DataPoint
	0,  // 8: protobuf.udal.udalstreaming.SessionData.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	15, // 9: protobuf.udal.udalstreaming.SessionData.details:type_name -> protobuf.common.NameValue
	0,  // 10: protobuf.udal.udalstreaming.EventData.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	0,  // 11: protobuf.udal.udalstreaming.TriggerData.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	2,  // 12: protobuf.udal.udalstreaming.TriggerData.triggerSource:type_name -> protobuf.udal.udalstreaming.TriggerSource
	0,  // 13: protobuf.udal.udalstreaming.LapData.streamType:type_name -> protobuf.udal.udalstreaming.StreamType
	3,  // 14: protobuf.udal.udalstreaming.LapData.type:type_name -> protobuf.udal.udalstreaming.LapData.LapType
	2,  // 15: protobuf.udal.udalstreaming.LapData.triggerSource:type_name -> protobuf.udal.udalstreaming.TriggerSource
	16, // 16: protobuf.udal.udalstreaming.Tag.startTime:type_name -> google.protobuf.Timestamp
	16, // 17: protobuf.udal.udalstreaming.Tag.endTime:type_name -> google.protobuf.Timestamp
	17, // 18: protobuf.udal.udalstreaming.Tag.dataPoints:type_name -> protobuf.tagdata.TagDataPoint
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_udalStreaming_proto_init() }
func file_udalStreaming_proto_init() {
	if File_udalStreaming_proto != nil {
		return
	}
	file_tagDataPoint_proto_init()
	file_nameValue_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_udalStreaming_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetrySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_udalStreaming_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_udalStreaming_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_udalStreaming_proto_goTypes,
		DependencyIndexes: file_udalStreaming_proto_depIdxs,
		EnumInfos:         file_udalStreaming_proto_enumTypes,
		MessageInfos:      file_udalStreaming_proto_msgTypes,
	}.Build()
	File_udalStreaming_proto = out.File
	file_udalStreaming_proto_rawDesc = nil
	file_udalStreaming_proto_goTypes = nil
	file_udalStreaming_proto_depIdxs = nil
}
